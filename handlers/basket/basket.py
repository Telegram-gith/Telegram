from aiogram import Bot, Router, F
from aiogram.filters import or_f
from aiogram.types import Message, CallbackQuery
from handlers.start.start_kb import start_kb, register_kb
from database.Database import DataBase
from handlers.basket.basket_kb import *
from core.translation import _
from Google_sheets.Google_sheets import write_order_to_sheet
from handlers.catalog.catalog import format_price

basket_router = Router()


@basket_router.message(or_f(F.text == '/basket', F.text.contains('üõí ')))
async def home_basket(message: Message, bot: Bot):
    basket_message_ids = []
    db = DataBase()
    user_id = str(message.from_user.id)

    # Fetch the user's language preference
    lang = await db.get_lang(user_id)
    basket_text = _('üõí –ö–æ—Ä–∑–∏–Ω–∞', lang)

    # Check if the message text matches the basket command
    if message.text in basket_text or message.text == '/basket':
        # Verify if the user is registered
        user = await db.get_user(user_id)
        if not user:
            await bot.send_message(
                user_id,
                _("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", lang),
                reply_markup=register_kb(lang)
            )
        else:
            # Fetch and display products in the basket
            products = await db.get_basket(user_id)

            if products:
                for product in products:
                    # Fetch product details
                    item = await db.get_product_one(product.product)
                    formatted_price = format_price(product.product_sum)
                    basket_message = await bot.send_photo(
                        user_id,
                        photo=item.images,
                        caption=(f"<b>{item.name}</b>\n\n" +
                                 _('–û–ø–∏—Å–∞–Ω–∏–µ: ', lang) + f"{item.description}\n" +
                                 _('–¶–µ–Ω–∞: ', lang) + f"{item.price}" + _(" —Å—É–º", lang) + '\n' +
                                 _('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ', lang) + f"{product.product_quantity}\n" +
                                 _('–°—É–º–º–∞: ', lang) + f"{formatted_price}"),
                        reply_markup=order_specific_kb(lang, product_id=product.product, ID=product.id)
                    )
                    basket_message_ids.append(basket_message.message_id)

                await bot.send_message(user_id, _("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", lang),
                                       reply_markup=basket_reply_kb(lang, basket_message_ids))
            else:
                # Handle the case where the basket is empty
                await bot.send_message(
                    user_id,
                    _('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', lang),
                    reply_markup=start_kb(lang)
                )
    else:
        return


# Delete a specific order
@basket_router.callback_query(F.data.startswith('delete_order_'))
async def delete_order(call: CallbackQuery):
    product_id = int(call.data.split('_')[-2])
    basket_id = int(call.data.split('_')[-1])
    user_id = str(call.from_user.id)
    db = DataBase()
    lang = await db.get_lang(user_id)

    basket_item = await db.get_basket_item(product_id, user_id, basket_id)
    if basket_item:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        product = await db.get_product_one(product_id)
        new_quantity = product.quantity + basket_item.product_quantity
        await db.update_product_quantity(product_id, new_quantity)

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        await db.delete_basket_one(product_id, user_id, basket_id)
        await call.message.answer(
            _("–ó–∞–∫–∞–∑ –Ω–∞ ", lang) + f"{product.name}" + _(" –±—ã–ª —É–¥–∞–ª–µ–Ω.", lang)
        )
        await call.message.edit_reply_markup(reply_markup=None)
    else:
        await call.message.answer(
            _("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.", lang)
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–∫–∞–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    remaining_orders = await db.get_basket(user_id)
    if not remaining_orders:
        await call.message.answer(
            _("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", lang), reply_markup=start_kb(lang)
        )
    else:
        await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()


@basket_router.callback_query(F.data.startswith('basket_confirm_order_'))
async def confirm_order(call: CallbackQuery):
    product_id = int(call.data.split('_')[-2])
    basket_id = int(call.data.split('_')[-1])
    user_id = str(call.from_user.id)
    db = DataBase()
    lang = await db.get_lang(user_id)

    basket_item = await db.get_basket_item(product_id, user_id, basket_id)
    if basket_item:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–∞
        user = await db.get_user(user_id)
        product = await db.get_product_one(product_id)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        await db.confirm_product(
            basket_item.product_sum,
            product.name,
            basket_item.product_quantity,
            user_id,
            user.username,
            user.usersurname,
            user.userphone,
            status=0
        )

        order_data = await db.prepare_orders_for_sheet()
        await write_order_to_sheet(order_data)

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        await db.delete_basket_one(product_id, user_id, basket_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await call.message.answer(
            _("–ó–∞–∫–∞–∑ –Ω–∞ ", lang) + f"{product.name}" + _(" –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", lang),
            reply_markup=start_kb(lang)
        )
        await call.message.edit_reply_markup(reply_markup=None)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await db.get_admins()
        for admin in admins:
            await call.bot.send_message(
                admin.telegram_id,
                _(f"–ù–æ–≤—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã\n\n", lang) +
                _(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ", lang) + f"{user.username} {user.usersurname}\n" +
                _(f"–¢–µ–ª–µ—Ñ–æ–Ω: ", lang) + f"{user.userphone}\n" +
                _(f"–ü—Ä–æ–¥—É–∫—Ç:", lang) + f"{product.name}\n" +
                _(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", lang) + f"{basket_item.product_quantity}\n" +
                _(f"–°—É–º–º–∞: ", lang) + f"{basket_item.product_sum}\n" +
                _(f"–°—Ç–∞—Ç—É—Å: –í —Å—Ç–∞–¥–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", lang)
            )
        super_admin_id = "6102015555"
        await call.bot.send_message(
            super_admin_id,
            _(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑! \n\n", lang) +
            _(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ", lang) + f"{user.username} {user.usersurname}\n" +
            _(f"–¢–µ–ª–µ—Ñ–æ–Ω: ", lang) + f"{user.userphone}\n" +
            _(f"–ü—Ä–æ–¥—É–∫—Ç: ", lang) + f"{product.name}\n" +
            _(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", lang) + f"{basket_item.product_quantity}\n" +
            _(f"–°—É–º–º–∞: ", lang) + f"{basket_item.product_sum}\n" +
            _(f"–°—Ç–∞—Ç—É—Å: –í —Å—Ç–∞–¥–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", lang)
        )
    else:
        await call.message.answer(
            _("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.", lang)
        )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–∫–∞–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    remaining_orders = await db.get_basket(user_id)
    if not remaining_orders:
        await call.message.answer(
            _("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", lang), reply_markup=start_kb(lang)
        )
    else:
        await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()


# Delete all orders from the basket
@basket_router.message(F.text.contains("‚ÄºÔ∏è "))
async def delete_all_orders(message: Message, bot: Bot):
    db = DataBase()
    user_id = str(message.from_user.id)
    basket_items = await db.get_basket(user_id)
    lang = await db.get_lang(user_id)
    basket_delete_text = _('‚ÄºÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', lang)

    if message.text not in basket_delete_text:
        return
    else:
        # Restore product quantities first
        for item in basket_items:
            product = await db.get_product_one(item.product)
            new_quantity = product.quantity + item.product_quantity
            await db.update_product_quantity(item.product, new_quantity)

        # Clear the basket
        await db.delete_basket_all(user_id)
        await message.answer(_(f"–í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", lang), reply_markup=start_kb(lang))


# Cancel operation
@basket_router.message(F.text.contains('‚ùå '))
async def cancel_operation(message: Message):
    db = DataBase()
    lang = await db.get_lang(str(message.from_user.id))
    basket_cancel_text = _('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é', lang)
    if message.text not in basket_cancel_text:
        return
    else:
        await message.answer(_("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", lang), reply_markup=start_kb(lang))
